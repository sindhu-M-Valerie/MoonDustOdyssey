{"ast":null,"code":"var _jsxFileName = \"/workspaces/MoonDustOdyssey/src/MoonJumperGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoonJumperGame = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [score, setScore] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const gameRef = useRef({\n    cat: {\n      angle: 0,\n      // Angle on moon surface\n      distance: 200,\n      // Distance from moon center  \n      x: 0,\n      y: 0,\n      // Cartesian coordinates\n      vx: 0,\n      vy: 0,\n      // Velocity when jumping\n      r: 30,\n      // Radius\n      isOnMoon: true // Whether cat is on moon surface\n    },\n    platforms: [],\n    stars: [],\n    moonRotation: 0,\n    gravity: 0.4,\n    jumpForce: 8,\n    animationId: null\n  });\n\n  // Separate effect for initializing the game (runs once)\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Initialize game objects\n    const game = gameRef.current;\n\n    // Create platforms\n    game.platforms = [];\n    for (let i = 0; i < 8; i++) {\n      game.platforms.push({\n        angle: i * (Math.PI / 4),\n        distance: 200\n      });\n    }\n\n    // Create stars\n    game.stars = [];\n    for (let i = 0; i < 50; i++) {\n      game.stars.push({\n        x: (Math.random() - 0.5) * canvas.width,\n        y: (Math.random() - 0.5) * canvas.height,\n        size: Math.random() * 3 + 1,\n        twinkle: Math.random() * Math.PI * 2,\n        speed: Math.random() * 0.02 + 0.01\n      });\n    }\n\n    // Initialize cat position - start on moon surface\n    game.cat.angle = 0;\n    game.cat.distance = 200;\n    game.cat.isOnMoon = true;\n    game.cat.vx = 0;\n    game.cat.vy = 0;\n    setGameStarted(true);\n  }, []);\n\n  // Separate effect for game loop (runs when game starts)\n  useEffect(() => {\n    if (!gameStarted) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const game = gameRef.current;\n\n    // Game loop\n    function gameLoop() {\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw gradient background\n      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n      gradient.addColorStop(0, 'rgb(25, 25, 60)');\n      gradient.addColorStop(1, 'rgb(10, 10, 25)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Center coordinate system\n      ctx.save();\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n\n      // Draw twinkling stars\n      game.stars.forEach(star => {\n        star.twinkle += star.speed;\n        const alpha = (Math.sin(star.twinkle) + 1) / 2 * 0.8 + 0.2;\n        const size = star.size * (1 + Math.sin(star.twinkle * 2) * 0.3);\n        ctx.save();\n        ctx.globalAlpha = alpha;\n        ctx.shadowColor = `rgba(255, 255, 200, ${alpha * 0.8})`;\n        ctx.shadowBlur = size * 3;\n        ctx.font = `${size * 8}px Arial`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('⭐', star.x, star.y);\n        ctx.restore();\n        ctx.shadowBlur = 0;\n      });\n\n      // Draw animated moon\n      const moonScale = 1 + Math.sin(Date.now() * 0.001) * 0.1;\n      const moonGlow = (Math.sin(Date.now() * 0.002) + 1) / 2 * 0.5 + 0.5;\n      ctx.save();\n      ctx.scale(moonScale, moonScale);\n      ctx.shadowColor = `rgba(255, 255, 150, ${moonGlow})`;\n      ctx.shadowBlur = 30;\n      ctx.fillStyle = '#FFF8DC';\n      ctx.font = '60px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('🌙', 0, 0);\n      ctx.restore();\n\n      // Draw rotating platforms\n      ctx.save();\n      ctx.rotate(game.moonRotation);\n      game.platforms.forEach(platform => {\n        const x = platform.distance * Math.cos(platform.angle);\n        const y = platform.distance * Math.sin(platform.angle);\n        ctx.fillStyle = 'rgba(200, 200, 255, 0.8)';\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';\n        ctx.lineWidth = 2;\n\n        // Make platforms larger and more visible\n        ctx.beginPath();\n        ctx.ellipse(x, y, 30, 8, 0, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n\n        // Add glow effect for platforms\n        ctx.shadowColor = 'rgba(200, 200, 255, 0.5)';\n        ctx.shadowBlur = 10;\n        ctx.beginPath();\n        ctx.ellipse(x, y, 30, 8, 0, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.shadowBlur = 0;\n      });\n      ctx.restore();\n\n      // Update and draw cat\n      const cat = game.cat;\n      if (cat.isOnMoon) {\n        // Cat sticks to moon surface and rotates with it\n        const totalAngle = cat.angle + game.moonRotation;\n        cat.x = cat.distance * Math.cos(totalAngle);\n        cat.y = cat.distance * Math.sin(totalAngle);\n      } else {\n        // Cat is in flight - apply physics\n        cat.vx += 0; // No air resistance\n        cat.vy += game.gravity;\n        cat.x += cat.vx;\n        cat.y += cat.vy;\n\n        // Calculate distance from moon center\n        const distFromCenter = Math.sqrt(cat.x * cat.x + cat.y * cat.y);\n\n        // Check if cat landed back on moon surface\n        if (distFromCenter <= cat.distance + cat.r / 2 && cat.vy > 0) {\n          // Cat landed back on moon\n          cat.isOnMoon = true;\n          cat.angle = Math.atan2(cat.y, cat.x) - game.moonRotation;\n          cat.vx = 0;\n          cat.vy = 0;\n\n          // Check if landed near a platform\n          let nearPlatform = false;\n          for (let platform of game.platforms) {\n            const platformAngle = platform.angle;\n            let angleDiff = Math.abs(cat.angle - platformAngle);\n            // Handle angle wrapping\n            if (angleDiff > Math.PI) angleDiff = 2 * Math.PI - angleDiff;\n            if (angleDiff < Math.PI / 8) {\n              // Within platform range\n              nearPlatform = true;\n              setScore(prev => prev + 1);\n              break;\n            }\n          }\n        }\n\n        // Check if cat went too far from moon\n        if (distFromCenter > canvas.width / 2) {\n          // Reset cat\n          cat.angle = 0;\n          cat.isOnMoon = true;\n          cat.vx = 0;\n          cat.vy = 0;\n          setScore(0);\n        }\n      }\n\n      // Draw cat\n      ctx.fillStyle = '#38BDF8';\n      ctx.beginPath();\n      ctx.arc(cat.x, cat.y, cat.r / 2, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Cat eyes\n      ctx.fillStyle = 'black';\n      ctx.beginPath();\n      ctx.arc(cat.x - 5, cat.y - 5, 2, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(cat.x + 5, cat.y - 5, 2, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Update rotation\n      game.moonRotation += 0.002 + score * 0.0001;\n      ctx.restore();\n      game.animationId = requestAnimationFrame(gameLoop);\n    }\n\n    // Check if cat is on platform\n    function isOnPlatform() {\n      const cat = game.cat;\n      for (let platform of game.platforms) {\n        const px = platform.distance * Math.cos(platform.angle + game.moonRotation);\n        const py = platform.distance * Math.sin(platform.angle + game.moonRotation);\n        const dist = Math.sqrt((cat.x - px) ** 2 + (cat.y + cat.r / 2 - py) ** 2);\n        if (dist < cat.r && cat.vy >= 0) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // Jump function\n    function jump() {\n      if (isOnPlatform()) {\n        game.cat.vy = game.jumpForce;\n        setScore(prev => prev + 1);\n      }\n    }\n\n    // Start game\n    gameLoop();\n\n    // Cleanup\n    return () => {\n      if (game.animationId) {\n        cancelAnimationFrame(game.animationId);\n      }\n    };\n  }, [gameStarted, score]);\n\n  // Separate effect for event handling\n  useEffect(() => {\n    if (!gameStarted) return;\n    const game = gameRef.current;\n\n    // Jump function\n    function jump() {\n      const cat = game.cat;\n      if (cat.isOnMoon) {\n        // Launch cat tangentially from moon surface\n        const totalAngle = cat.angle + game.moonRotation;\n\n        // Calculate tangent direction (perpendicular to radius)\n        const tangentAngle = totalAngle + Math.PI / 2;\n\n        // Set initial velocity in tangent direction\n        cat.vx = Math.cos(tangentAngle) * game.jumpForce;\n        cat.vy = Math.sin(tangentAngle) * game.jumpForce;\n\n        // Cat is now in flight\n        cat.isOnMoon = false;\n      }\n    }\n\n    // Event listeners\n    function handleKeyDown(e) {\n      if (e.code === 'Space' || e.code === 'ArrowUp') {\n        e.preventDefault();\n        jump();\n      }\n    }\n    function handleClick(e) {\n      e.preventDefault();\n      jump();\n    }\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('click', handleClick);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('click', handleClick);\n    };\n  }, [gameStarted]);\n  const gameContainerStyle = {\n    position: 'relative',\n    width: '100vw',\n    height: '100vh',\n    background: 'linear-gradient(135deg, #1a1a3a 0%, #0f0f1f 100%)',\n    overflow: 'hidden',\n    fontFamily: 'Arial, sans-serif'\n  };\n  const canvasStyle = {\n    display: 'block',\n    cursor: 'pointer'\n  };\n  const scoreStyle = {\n    position: 'absolute',\n    top: '20px',\n    left: '20px',\n    color: '#fff8aa',\n    fontSize: '24px',\n    fontWeight: 'bold',\n    zIndex: 10\n  };\n  const instructionsStyle = {\n    position: 'absolute',\n    bottom: '20px',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    color: 'white',\n    textAlign: 'center',\n    fontSize: '16px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: gameContainerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: canvasStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: scoreStyle,\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: instructionsStyle,\n      children: \"Stick to the moon and jump to land near platforms! Press SPACEBAR, \\u2191 or CLICK to jump!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 9\n  }, this);\n};\n_s(MoonJumperGame, \"EEnRNd15JF3UKpBHQiocvRrtKM0=\");\n_c = MoonJumperGame;\nexport default MoonJumperGame;\nvar _c;\n$RefreshReg$(_c, \"MoonJumperGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MoonJumperGame","_s","canvasRef","score","setScore","gameStarted","setGameStarted","gameRef","cat","angle","distance","x","y","vx","vy","r","isOnMoon","platforms","stars","moonRotation","gravity","jumpForce","animationId","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","game","i","push","Math","PI","random","size","twinkle","speed","gameLoop","clearRect","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","save","translate","forEach","star","alpha","sin","globalAlpha","shadowColor","shadowBlur","font","textAlign","textBaseline","fillText","restore","moonScale","Date","now","moonGlow","scale","rotate","platform","cos","strokeStyle","lineWidth","beginPath","ellipse","fill","stroke","totalAngle","distFromCenter","sqrt","atan2","nearPlatform","platformAngle","angleDiff","abs","prev","arc","requestAnimationFrame","isOnPlatform","px","py","dist","jump","cancelAnimationFrame","tangentAngle","handleKeyDown","e","code","preventDefault","handleClick","addEventListener","removeEventListener","gameContainerStyle","position","background","overflow","fontFamily","canvasStyle","display","cursor","scoreStyle","top","left","color","fontSize","fontWeight","zIndex","instructionsStyle","bottom","transform","style","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/MoonDustOdyssey/src/MoonJumperGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst MoonJumperGame = () => {\n    const canvasRef = useRef(null);\n    const [score, setScore] = useState(0);\n    const [gameStarted, setGameStarted] = useState(false);\n    const gameRef = useRef({\n        cat: { \n            angle: 0,           // Angle on moon surface\n            distance: 200,      // Distance from moon center  \n            x: 0, y: 0,         // Cartesian coordinates\n            vx: 0, vy: 0,       // Velocity when jumping\n            r: 30,              // Radius\n            isOnMoon: true      // Whether cat is on moon surface\n        },\n        platforms: [],\n        stars: [],\n        moonRotation: 0,\n        gravity: 0.4,\n        jumpForce: 8,\n        animationId: null\n    });\n\n    // Separate effect for initializing the game (runs once)\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        \n        // Set canvas size\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        \n        // Initialize game objects\n        const game = gameRef.current;\n        \n        // Create platforms\n        game.platforms = [];\n        for (let i = 0; i < 8; i++) {\n            game.platforms.push({\n                angle: i * (Math.PI / 4),\n                distance: 200\n            });\n        }\n        \n        // Create stars\n        game.stars = [];\n        for (let i = 0; i < 50; i++) {\n            game.stars.push({\n                x: (Math.random() - 0.5) * canvas.width,\n                y: (Math.random() - 0.5) * canvas.height,\n                size: Math.random() * 3 + 1,\n                twinkle: Math.random() * Math.PI * 2,\n                speed: Math.random() * 0.02 + 0.01\n            });\n        }\n\n        // Initialize cat position - start on moon surface\n        game.cat.angle = 0;\n        game.cat.distance = 200;\n        game.cat.isOnMoon = true;\n        game.cat.vx = 0;\n        game.cat.vy = 0;\n        \n        setGameStarted(true);\n    }, []);\n\n    // Separate effect for game loop (runs when game starts)\n    useEffect(() => {\n        if (!gameStarted) return;\n        \n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const game = gameRef.current;\n        \n        \n        // Game loop\n        function gameLoop() {\n            // Clear canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            // Draw gradient background\n            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n            gradient.addColorStop(0, 'rgb(25, 25, 60)');\n            gradient.addColorStop(1, 'rgb(10, 10, 25)');\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            \n            // Center coordinate system\n            ctx.save();\n            ctx.translate(canvas.width / 2, canvas.height / 2);\n            \n            // Draw twinkling stars\n            game.stars.forEach(star => {\n                star.twinkle += star.speed;\n                const alpha = (Math.sin(star.twinkle) + 1) / 2 * 0.8 + 0.2;\n                const size = star.size * (1 + Math.sin(star.twinkle * 2) * 0.3);\n                \n                ctx.save();\n                ctx.globalAlpha = alpha;\n                ctx.shadowColor = `rgba(255, 255, 200, ${alpha * 0.8})`;\n                ctx.shadowBlur = size * 3;\n                \n                ctx.font = `${size * 8}px Arial`;\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n                ctx.fillText('⭐', star.x, star.y);\n                \n                ctx.restore();\n                ctx.shadowBlur = 0;\n            });\n            \n            // Draw animated moon\n            const moonScale = 1 + Math.sin(Date.now() * 0.001) * 0.1;\n            const moonGlow = (Math.sin(Date.now() * 0.002) + 1) / 2 * 0.5 + 0.5;\n            \n            ctx.save();\n            ctx.scale(moonScale, moonScale);\n            ctx.shadowColor = `rgba(255, 255, 150, ${moonGlow})`;\n            ctx.shadowBlur = 30;\n            ctx.fillStyle = '#FFF8DC';\n            ctx.font = '60px Arial';\n            ctx.textAlign = 'center';\n            ctx.fillText('🌙', 0, 0);\n            ctx.restore();\n            \n            // Draw rotating platforms\n            ctx.save();\n            ctx.rotate(game.moonRotation);\n            \n            game.platforms.forEach(platform => {\n                const x = platform.distance * Math.cos(platform.angle);\n                const y = platform.distance * Math.sin(platform.angle);\n                \n                ctx.fillStyle = 'rgba(200, 200, 255, 0.8)';\n                ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';\n                ctx.lineWidth = 2;\n                \n                // Make platforms larger and more visible\n                ctx.beginPath();\n                ctx.ellipse(x, y, 30, 8, 0, 0, Math.PI * 2);\n                ctx.fill();\n                ctx.stroke();\n                \n                // Add glow effect for platforms\n                ctx.shadowColor = 'rgba(200, 200, 255, 0.5)';\n                ctx.shadowBlur = 10;\n                ctx.beginPath();\n                ctx.ellipse(x, y, 30, 8, 0, 0, Math.PI * 2);\n                ctx.fill();\n                ctx.shadowBlur = 0;\n            });\n            \n            ctx.restore();\n            \n            // Update and draw cat\n            const cat = game.cat;\n            \n            if (cat.isOnMoon) {\n                // Cat sticks to moon surface and rotates with it\n                const totalAngle = cat.angle + game.moonRotation;\n                cat.x = cat.distance * Math.cos(totalAngle);\n                cat.y = cat.distance * Math.sin(totalAngle);\n            } else {\n                // Cat is in flight - apply physics\n                cat.vx += 0; // No air resistance\n                cat.vy += game.gravity;\n                cat.x += cat.vx;\n                cat.y += cat.vy;\n                \n                // Calculate distance from moon center\n                const distFromCenter = Math.sqrt(cat.x * cat.x + cat.y * cat.y);\n                \n                // Check if cat landed back on moon surface\n                if (distFromCenter <= cat.distance + cat.r / 2 && cat.vy > 0) {\n                    // Cat landed back on moon\n                    cat.isOnMoon = true;\n                    cat.angle = Math.atan2(cat.y, cat.x) - game.moonRotation;\n                    cat.vx = 0;\n                    cat.vy = 0;\n                    \n                    // Check if landed near a platform\n                    let nearPlatform = false;\n                    for (let platform of game.platforms) {\n                        const platformAngle = platform.angle;\n                        let angleDiff = Math.abs(cat.angle - platformAngle);\n                        // Handle angle wrapping\n                        if (angleDiff > Math.PI) angleDiff = 2 * Math.PI - angleDiff;\n                        \n                        if (angleDiff < Math.PI / 8) { // Within platform range\n                            nearPlatform = true;\n                            setScore(prev => prev + 1);\n                            break;\n                        }\n                    }\n                }\n                \n                // Check if cat went too far from moon\n                if (distFromCenter > canvas.width / 2) {\n                    // Reset cat\n                    cat.angle = 0;\n                    cat.isOnMoon = true;\n                    cat.vx = 0;\n                    cat.vy = 0;\n                    setScore(0);\n                }\n            }\n            \n            // Draw cat\n            ctx.fillStyle = '#38BDF8';\n            ctx.beginPath();\n            ctx.arc(cat.x, cat.y, cat.r / 2, 0, Math.PI * 2);\n            ctx.fill();\n            \n            // Cat eyes\n            ctx.fillStyle = 'black';\n            ctx.beginPath();\n            ctx.arc(cat.x - 5, cat.y - 5, 2, 0, Math.PI * 2);\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(cat.x + 5, cat.y - 5, 2, 0, Math.PI * 2);\n            ctx.fill();\n            \n            // Update rotation\n            game.moonRotation += 0.002 + score * 0.0001;\n            \n            ctx.restore();\n            \n            game.animationId = requestAnimationFrame(gameLoop);\n        }\n        \n        // Check if cat is on platform\n        function isOnPlatform() {\n            const cat = game.cat;\n            \n            for (let platform of game.platforms) {\n                const px = platform.distance * Math.cos(platform.angle + game.moonRotation);\n                const py = platform.distance * Math.sin(platform.angle + game.moonRotation);\n                const dist = Math.sqrt((cat.x - px) ** 2 + ((cat.y + cat.r / 2) - py) ** 2);\n                \n                if (dist < cat.r && cat.vy >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        \n        // Jump function\n        function jump() {\n            if (isOnPlatform()) {\n                game.cat.vy = game.jumpForce;\n                setScore(prev => prev + 1);\n            }\n        }\n        \n        // Start game\n        gameLoop();\n        \n        // Cleanup\n        return () => {\n            if (game.animationId) {\n                cancelAnimationFrame(game.animationId);\n            }\n        };\n    }, [gameStarted, score]);\n\n    // Separate effect for event handling\n    useEffect(() => {\n        if (!gameStarted) return;\n        \n        const game = gameRef.current;\n        \n        // Jump function\n        function jump() {\n            const cat = game.cat;\n            \n            if (cat.isOnMoon) {\n                // Launch cat tangentially from moon surface\n                const totalAngle = cat.angle + game.moonRotation;\n                \n                // Calculate tangent direction (perpendicular to radius)\n                const tangentAngle = totalAngle + Math.PI / 2;\n                \n                // Set initial velocity in tangent direction\n                cat.vx = Math.cos(tangentAngle) * game.jumpForce;\n                cat.vy = Math.sin(tangentAngle) * game.jumpForce;\n                \n                // Cat is now in flight\n                cat.isOnMoon = false;\n            }\n        }\n        \n        // Event listeners\n        function handleKeyDown(e) {\n            if (e.code === 'Space' || e.code === 'ArrowUp') {\n                e.preventDefault();\n                jump();\n            }\n        }\n        \n        function handleClick(e) {\n            e.preventDefault();\n            jump();\n        }\n        \n        window.addEventListener('keydown', handleKeyDown);\n        window.addEventListener('click', handleClick);\n        \n        // Cleanup\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n            window.removeEventListener('click', handleClick);\n        };\n    }, [gameStarted]);\n\n    const gameContainerStyle = {\n        position: 'relative',\n        width: '100vw',\n        height: '100vh',\n        background: 'linear-gradient(135deg, #1a1a3a 0%, #0f0f1f 100%)',\n        overflow: 'hidden',\n        fontFamily: 'Arial, sans-serif'\n    };\n\n    const canvasStyle = {\n        display: 'block',\n        cursor: 'pointer'\n    };\n\n    const scoreStyle = {\n        position: 'absolute',\n        top: '20px',\n        left: '20px',\n        color: '#fff8aa',\n        fontSize: '24px',\n        fontWeight: 'bold',\n        zIndex: 10\n    };\n\n    const instructionsStyle = {\n        position: 'absolute',\n        bottom: '20px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        color: 'white',\n        textAlign: 'center',\n        fontSize: '16px'\n    };\n\n    return (\n        <div style={gameContainerStyle}>\n            <canvas ref={canvasRef} style={canvasStyle} />\n            <div style={scoreStyle}>Score: {score}</div>\n            <div style={instructionsStyle}>\n                Stick to the moon and jump to land near platforms! Press SPACEBAR, ↑ or CLICK to jump!\n            </div>\n        </div>\n    );\n};\n\nexport default MoonJumperGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,SAAS,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMY,OAAO,GAAGV,MAAM,CAAC;IACnBW,GAAG,EAAE;MACDC,KAAK,EAAE,CAAC;MAAY;MACpBC,QAAQ,EAAE,GAAG;MAAO;MACpBC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAU;MACpBC,EAAE,EAAE,CAAC;MAAEC,EAAE,EAAE,CAAC;MAAQ;MACpBC,CAAC,EAAE,EAAE;MAAe;MACpBC,QAAQ,EAAE,IAAI,CAAM;IACxB,CAAC;IACDC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,GAAG;IACZC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE;EACjB,CAAC,CAAC;;EAEF;EACA1B,SAAS,CAAC,MAAM;IACZ,MAAM2B,MAAM,GAAGrB,SAAS,CAACsB,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAH,MAAM,CAACI,KAAK,GAAGC,MAAM,CAACC,UAAU;IAChCN,MAAM,CAACO,MAAM,GAAGF,MAAM,CAACG,WAAW;;IAElC;IACA,MAAMC,IAAI,GAAGzB,OAAO,CAACiB,OAAO;;IAE5B;IACAQ,IAAI,CAACf,SAAS,GAAG,EAAE;IACnB,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxBD,IAAI,CAACf,SAAS,CAACiB,IAAI,CAAC;QAChBzB,KAAK,EAAEwB,CAAC,IAAIE,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;QACxB1B,QAAQ,EAAE;MACd,CAAC,CAAC;IACN;;IAEA;IACAsB,IAAI,CAACd,KAAK,GAAG,EAAE;IACf,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzBD,IAAI,CAACd,KAAK,CAACgB,IAAI,CAAC;QACZvB,CAAC,EAAE,CAACwB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAId,MAAM,CAACI,KAAK;QACvCf,CAAC,EAAE,CAACuB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAId,MAAM,CAACO,MAAM;QACxCQ,IAAI,EAAEH,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QAC3BE,OAAO,EAAEJ,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGF,IAAI,CAACC,EAAE,GAAG,CAAC;QACpCI,KAAK,EAAEL,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG;MAClC,CAAC,CAAC;IACN;;IAEA;IACAL,IAAI,CAACxB,GAAG,CAACC,KAAK,GAAG,CAAC;IAClBuB,IAAI,CAACxB,GAAG,CAACE,QAAQ,GAAG,GAAG;IACvBsB,IAAI,CAACxB,GAAG,CAACQ,QAAQ,GAAG,IAAI;IACxBgB,IAAI,CAACxB,GAAG,CAACK,EAAE,GAAG,CAAC;IACfmB,IAAI,CAACxB,GAAG,CAACM,EAAE,GAAG,CAAC;IAEfR,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAV,SAAS,CAAC,MAAM;IACZ,IAAI,CAACS,WAAW,EAAE;IAElB,MAAMkB,MAAM,GAAGrB,SAAS,CAACsB,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMM,IAAI,GAAGzB,OAAO,CAACiB,OAAO;;IAG5B;IACA,SAASiB,QAAQA,CAAA,EAAG;MAChB;MACAhB,GAAG,CAACiB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEnB,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACO,MAAM,CAAC;;MAEhD;MACA,MAAMa,QAAQ,GAAGlB,GAAG,CAACmB,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAErB,MAAM,CAACO,MAAM,CAAC;MACjEa,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,iBAAiB,CAAC;MAC3CF,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,iBAAiB,CAAC;MAC3CpB,GAAG,CAACqB,SAAS,GAAGH,QAAQ;MACxBlB,GAAG,CAACsB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAExB,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACO,MAAM,CAAC;;MAE/C;MACAL,GAAG,CAACuB,IAAI,CAAC,CAAC;MACVvB,GAAG,CAACwB,SAAS,CAAC1B,MAAM,CAACI,KAAK,GAAG,CAAC,EAAEJ,MAAM,CAACO,MAAM,GAAG,CAAC,CAAC;;MAElD;MACAE,IAAI,CAACd,KAAK,CAACgC,OAAO,CAACC,IAAI,IAAI;QACvBA,IAAI,CAACZ,OAAO,IAAIY,IAAI,CAACX,KAAK;QAC1B,MAAMY,KAAK,GAAG,CAACjB,IAAI,CAACkB,GAAG,CAACF,IAAI,CAACZ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG;QAC1D,MAAMD,IAAI,GAAGa,IAAI,CAACb,IAAI,IAAI,CAAC,GAAGH,IAAI,CAACkB,GAAG,CAACF,IAAI,CAACZ,OAAO,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAE/Dd,GAAG,CAACuB,IAAI,CAAC,CAAC;QACVvB,GAAG,CAAC6B,WAAW,GAAGF,KAAK;QACvB3B,GAAG,CAAC8B,WAAW,GAAG,uBAAuBH,KAAK,GAAG,GAAG,GAAG;QACvD3B,GAAG,CAAC+B,UAAU,GAAGlB,IAAI,GAAG,CAAC;QAEzBb,GAAG,CAACgC,IAAI,GAAG,GAAGnB,IAAI,GAAG,CAAC,UAAU;QAChCb,GAAG,CAACiC,SAAS,GAAG,QAAQ;QACxBjC,GAAG,CAACkC,YAAY,GAAG,QAAQ;QAC3BlC,GAAG,CAACmC,QAAQ,CAAC,GAAG,EAAET,IAAI,CAACxC,CAAC,EAAEwC,IAAI,CAACvC,CAAC,CAAC;QAEjCa,GAAG,CAACoC,OAAO,CAAC,CAAC;QACbpC,GAAG,CAAC+B,UAAU,GAAG,CAAC;MACtB,CAAC,CAAC;;MAEF;MACA,MAAMM,SAAS,GAAG,CAAC,GAAG3B,IAAI,CAACkB,GAAG,CAACU,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG;MACxD,MAAMC,QAAQ,GAAG,CAAC9B,IAAI,CAACkB,GAAG,CAACU,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG;MAEnEvC,GAAG,CAACuB,IAAI,CAAC,CAAC;MACVvB,GAAG,CAACyC,KAAK,CAACJ,SAAS,EAAEA,SAAS,CAAC;MAC/BrC,GAAG,CAAC8B,WAAW,GAAG,uBAAuBU,QAAQ,GAAG;MACpDxC,GAAG,CAAC+B,UAAU,GAAG,EAAE;MACnB/B,GAAG,CAACqB,SAAS,GAAG,SAAS;MACzBrB,GAAG,CAACgC,IAAI,GAAG,YAAY;MACvBhC,GAAG,CAACiC,SAAS,GAAG,QAAQ;MACxBjC,GAAG,CAACmC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;MACxBnC,GAAG,CAACoC,OAAO,CAAC,CAAC;;MAEb;MACApC,GAAG,CAACuB,IAAI,CAAC,CAAC;MACVvB,GAAG,CAAC0C,MAAM,CAACnC,IAAI,CAACb,YAAY,CAAC;MAE7Ba,IAAI,CAACf,SAAS,CAACiC,OAAO,CAACkB,QAAQ,IAAI;QAC/B,MAAMzD,CAAC,GAAGyD,QAAQ,CAAC1D,QAAQ,GAAGyB,IAAI,CAACkC,GAAG,CAACD,QAAQ,CAAC3D,KAAK,CAAC;QACtD,MAAMG,CAAC,GAAGwD,QAAQ,CAAC1D,QAAQ,GAAGyB,IAAI,CAACkB,GAAG,CAACe,QAAQ,CAAC3D,KAAK,CAAC;QAEtDgB,GAAG,CAACqB,SAAS,GAAG,0BAA0B;QAC1CrB,GAAG,CAAC6C,WAAW,GAAG,0BAA0B;QAC5C7C,GAAG,CAAC8C,SAAS,GAAG,CAAC;;QAEjB;QACA9C,GAAG,CAAC+C,SAAS,CAAC,CAAC;QACf/C,GAAG,CAACgD,OAAO,CAAC9D,CAAC,EAAEC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEuB,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;QAC3CX,GAAG,CAACiD,IAAI,CAAC,CAAC;QACVjD,GAAG,CAACkD,MAAM,CAAC,CAAC;;QAEZ;QACAlD,GAAG,CAAC8B,WAAW,GAAG,0BAA0B;QAC5C9B,GAAG,CAAC+B,UAAU,GAAG,EAAE;QACnB/B,GAAG,CAAC+C,SAAS,CAAC,CAAC;QACf/C,GAAG,CAACgD,OAAO,CAAC9D,CAAC,EAAEC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEuB,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;QAC3CX,GAAG,CAACiD,IAAI,CAAC,CAAC;QACVjD,GAAG,CAAC+B,UAAU,GAAG,CAAC;MACtB,CAAC,CAAC;MAEF/B,GAAG,CAACoC,OAAO,CAAC,CAAC;;MAEb;MACA,MAAMrD,GAAG,GAAGwB,IAAI,CAACxB,GAAG;MAEpB,IAAIA,GAAG,CAACQ,QAAQ,EAAE;QACd;QACA,MAAM4D,UAAU,GAAGpE,GAAG,CAACC,KAAK,GAAGuB,IAAI,CAACb,YAAY;QAChDX,GAAG,CAACG,CAAC,GAAGH,GAAG,CAACE,QAAQ,GAAGyB,IAAI,CAACkC,GAAG,CAACO,UAAU,CAAC;QAC3CpE,GAAG,CAACI,CAAC,GAAGJ,GAAG,CAACE,QAAQ,GAAGyB,IAAI,CAACkB,GAAG,CAACuB,UAAU,CAAC;MAC/C,CAAC,MAAM;QACH;QACApE,GAAG,CAACK,EAAE,IAAI,CAAC,CAAC,CAAC;QACbL,GAAG,CAACM,EAAE,IAAIkB,IAAI,CAACZ,OAAO;QACtBZ,GAAG,CAACG,CAAC,IAAIH,GAAG,CAACK,EAAE;QACfL,GAAG,CAACI,CAAC,IAAIJ,GAAG,CAACM,EAAE;;QAEf;QACA,MAAM+D,cAAc,GAAG1C,IAAI,CAAC2C,IAAI,CAACtE,GAAG,CAACG,CAAC,GAAGH,GAAG,CAACG,CAAC,GAAGH,GAAG,CAACI,CAAC,GAAGJ,GAAG,CAACI,CAAC,CAAC;;QAE/D;QACA,IAAIiE,cAAc,IAAIrE,GAAG,CAACE,QAAQ,GAAGF,GAAG,CAACO,CAAC,GAAG,CAAC,IAAIP,GAAG,CAACM,EAAE,GAAG,CAAC,EAAE;UAC1D;UACAN,GAAG,CAACQ,QAAQ,GAAG,IAAI;UACnBR,GAAG,CAACC,KAAK,GAAG0B,IAAI,CAAC4C,KAAK,CAACvE,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACG,CAAC,CAAC,GAAGqB,IAAI,CAACb,YAAY;UACxDX,GAAG,CAACK,EAAE,GAAG,CAAC;UACVL,GAAG,CAACM,EAAE,GAAG,CAAC;;UAEV;UACA,IAAIkE,YAAY,GAAG,KAAK;UACxB,KAAK,IAAIZ,QAAQ,IAAIpC,IAAI,CAACf,SAAS,EAAE;YACjC,MAAMgE,aAAa,GAAGb,QAAQ,CAAC3D,KAAK;YACpC,IAAIyE,SAAS,GAAG/C,IAAI,CAACgD,GAAG,CAAC3E,GAAG,CAACC,KAAK,GAAGwE,aAAa,CAAC;YACnD;YACA,IAAIC,SAAS,GAAG/C,IAAI,CAACC,EAAE,EAAE8C,SAAS,GAAG,CAAC,GAAG/C,IAAI,CAACC,EAAE,GAAG8C,SAAS;YAE5D,IAAIA,SAAS,GAAG/C,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE;cAAE;cAC3B4C,YAAY,GAAG,IAAI;cACnB5E,QAAQ,CAACgF,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;cAC1B;YACJ;UACJ;QACJ;;QAEA;QACA,IAAIP,cAAc,GAAGtD,MAAM,CAACI,KAAK,GAAG,CAAC,EAAE;UACnC;UACAnB,GAAG,CAACC,KAAK,GAAG,CAAC;UACbD,GAAG,CAACQ,QAAQ,GAAG,IAAI;UACnBR,GAAG,CAACK,EAAE,GAAG,CAAC;UACVL,GAAG,CAACM,EAAE,GAAG,CAAC;UACVV,QAAQ,CAAC,CAAC,CAAC;QACf;MACJ;;MAEA;MACAqB,GAAG,CAACqB,SAAS,GAAG,SAAS;MACzBrB,GAAG,CAAC+C,SAAS,CAAC,CAAC;MACf/C,GAAG,CAAC4D,GAAG,CAAC7E,GAAG,CAACG,CAAC,EAAEH,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEoB,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;MAChDX,GAAG,CAACiD,IAAI,CAAC,CAAC;;MAEV;MACAjD,GAAG,CAACqB,SAAS,GAAG,OAAO;MACvBrB,GAAG,CAAC+C,SAAS,CAAC,CAAC;MACf/C,GAAG,CAAC4D,GAAG,CAAC7E,GAAG,CAACG,CAAC,GAAG,CAAC,EAAEH,GAAG,CAACI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEuB,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;MAChDX,GAAG,CAACiD,IAAI,CAAC,CAAC;MACVjD,GAAG,CAAC+C,SAAS,CAAC,CAAC;MACf/C,GAAG,CAAC4D,GAAG,CAAC7E,GAAG,CAACG,CAAC,GAAG,CAAC,EAAEH,GAAG,CAACI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEuB,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;MAChDX,GAAG,CAACiD,IAAI,CAAC,CAAC;;MAEV;MACA1C,IAAI,CAACb,YAAY,IAAI,KAAK,GAAGhB,KAAK,GAAG,MAAM;MAE3CsB,GAAG,CAACoC,OAAO,CAAC,CAAC;MAEb7B,IAAI,CAACV,WAAW,GAAGgE,qBAAqB,CAAC7C,QAAQ,CAAC;IACtD;;IAEA;IACA,SAAS8C,YAAYA,CAAA,EAAG;MACpB,MAAM/E,GAAG,GAAGwB,IAAI,CAACxB,GAAG;MAEpB,KAAK,IAAI4D,QAAQ,IAAIpC,IAAI,CAACf,SAAS,EAAE;QACjC,MAAMuE,EAAE,GAAGpB,QAAQ,CAAC1D,QAAQ,GAAGyB,IAAI,CAACkC,GAAG,CAACD,QAAQ,CAAC3D,KAAK,GAAGuB,IAAI,CAACb,YAAY,CAAC;QAC3E,MAAMsE,EAAE,GAAGrB,QAAQ,CAAC1D,QAAQ,GAAGyB,IAAI,CAACkB,GAAG,CAACe,QAAQ,CAAC3D,KAAK,GAAGuB,IAAI,CAACb,YAAY,CAAC;QAC3E,MAAMuE,IAAI,GAAGvD,IAAI,CAAC2C,IAAI,CAAC,CAACtE,GAAG,CAACG,CAAC,GAAG6E,EAAE,KAAK,CAAC,GAAG,CAAEhF,GAAG,CAACI,CAAC,GAAGJ,GAAG,CAACO,CAAC,GAAG,CAAC,GAAI0E,EAAE,KAAK,CAAC,CAAC;QAE3E,IAAIC,IAAI,GAAGlF,GAAG,CAACO,CAAC,IAAIP,GAAG,CAACM,EAAE,IAAI,CAAC,EAAE;UAC7B,OAAO,IAAI;QACf;MACJ;MACA,OAAO,KAAK;IAChB;;IAEA;IACA,SAAS6E,IAAIA,CAAA,EAAG;MACZ,IAAIJ,YAAY,CAAC,CAAC,EAAE;QAChBvD,IAAI,CAACxB,GAAG,CAACM,EAAE,GAAGkB,IAAI,CAACX,SAAS;QAC5BjB,QAAQ,CAACgF,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MAC9B;IACJ;;IAEA;IACA3C,QAAQ,CAAC,CAAC;;IAEV;IACA,OAAO,MAAM;MACT,IAAIT,IAAI,CAACV,WAAW,EAAE;QAClBsE,oBAAoB,CAAC5D,IAAI,CAACV,WAAW,CAAC;MAC1C;IACJ,CAAC;EACL,CAAC,EAAE,CAACjB,WAAW,EAAEF,KAAK,CAAC,CAAC;;EAExB;EACAP,SAAS,CAAC,MAAM;IACZ,IAAI,CAACS,WAAW,EAAE;IAElB,MAAM2B,IAAI,GAAGzB,OAAO,CAACiB,OAAO;;IAE5B;IACA,SAASmE,IAAIA,CAAA,EAAG;MACZ,MAAMnF,GAAG,GAAGwB,IAAI,CAACxB,GAAG;MAEpB,IAAIA,GAAG,CAACQ,QAAQ,EAAE;QACd;QACA,MAAM4D,UAAU,GAAGpE,GAAG,CAACC,KAAK,GAAGuB,IAAI,CAACb,YAAY;;QAEhD;QACA,MAAM0E,YAAY,GAAGjB,UAAU,GAAGzC,IAAI,CAACC,EAAE,GAAG,CAAC;;QAE7C;QACA5B,GAAG,CAACK,EAAE,GAAGsB,IAAI,CAACkC,GAAG,CAACwB,YAAY,CAAC,GAAG7D,IAAI,CAACX,SAAS;QAChDb,GAAG,CAACM,EAAE,GAAGqB,IAAI,CAACkB,GAAG,CAACwC,YAAY,CAAC,GAAG7D,IAAI,CAACX,SAAS;;QAEhD;QACAb,GAAG,CAACQ,QAAQ,GAAG,KAAK;MACxB;IACJ;;IAEA;IACA,SAAS8E,aAAaA,CAACC,CAAC,EAAE;MACtB,IAAIA,CAAC,CAACC,IAAI,KAAK,OAAO,IAAID,CAAC,CAACC,IAAI,KAAK,SAAS,EAAE;QAC5CD,CAAC,CAACE,cAAc,CAAC,CAAC;QAClBN,IAAI,CAAC,CAAC;MACV;IACJ;IAEA,SAASO,WAAWA,CAACH,CAAC,EAAE;MACpBA,CAAC,CAACE,cAAc,CAAC,CAAC;MAClBN,IAAI,CAAC,CAAC;IACV;IAEA/D,MAAM,CAACuE,gBAAgB,CAAC,SAAS,EAAEL,aAAa,CAAC;IACjDlE,MAAM,CAACuE,gBAAgB,CAAC,OAAO,EAAED,WAAW,CAAC;;IAE7C;IACA,OAAO,MAAM;MACTtE,MAAM,CAACwE,mBAAmB,CAAC,SAAS,EAAEN,aAAa,CAAC;MACpDlE,MAAM,CAACwE,mBAAmB,CAAC,OAAO,EAAEF,WAAW,CAAC;IACpD,CAAC;EACL,CAAC,EAAE,CAAC7F,WAAW,CAAC,CAAC;EAEjB,MAAMgG,kBAAkB,GAAG;IACvBC,QAAQ,EAAE,UAAU;IACpB3E,KAAK,EAAE,OAAO;IACdG,MAAM,EAAE,OAAO;IACfyE,UAAU,EAAE,mDAAmD;IAC/DC,QAAQ,EAAE,QAAQ;IAClBC,UAAU,EAAE;EAChB,CAAC;EAED,MAAMC,WAAW,GAAG;IAChBC,OAAO,EAAE,OAAO;IAChBC,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,UAAU,GAAG;IACfP,QAAQ,EAAE,UAAU;IACpBQ,GAAG,EAAE,MAAM;IACXC,IAAI,EAAE,MAAM;IACZC,KAAK,EAAE,SAAS;IAChBC,QAAQ,EAAE,MAAM;IAChBC,UAAU,EAAE,MAAM;IAClBC,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,iBAAiB,GAAG;IACtBd,QAAQ,EAAE,UAAU;IACpBe,MAAM,EAAE,MAAM;IACdN,IAAI,EAAE,KAAK;IACXO,SAAS,EAAE,kBAAkB;IAC7BN,KAAK,EAAE,OAAO;IACdtD,SAAS,EAAE,QAAQ;IACnBuD,QAAQ,EAAE;EACd,CAAC;EAED,oBACIlH,OAAA;IAAKwH,KAAK,EAAElB,kBAAmB;IAAAmB,QAAA,gBAC3BzH,OAAA;MAAQ0H,GAAG,EAAEvH,SAAU;MAACqH,KAAK,EAAEb;IAAY;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9C9H,OAAA;MAAKwH,KAAK,EAAEV,UAAW;MAAAW,QAAA,GAAC,SAAO,EAACrH,KAAK;IAAA;MAAAuH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC5C9H,OAAA;MAAKwH,KAAK,EAAEH,iBAAkB;MAAAI,QAAA,EAAC;IAE/B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5H,EAAA,CArWID,cAAc;AAAA8H,EAAA,GAAd9H,cAAc;AAuWpB,eAAeA,cAAc;AAAC,IAAA8H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}